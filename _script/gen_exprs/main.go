package main

import (
	"os"
	"text/template"
)

type expressionInfo struct {
	name      string
	valueType string
	numArgs   int
}

type expression struct {
	ID        int
	ValueType string

	Name    string
	NumArgs int
}

var rawExpressions = []expressionInfo{
	{name: "IDENT", valueType: "string"},
	{name: "DOLLAR_IDENT", valueType: "string"},

	// The number of args is variadic.
	// The $value int field holds the actual number of arguments.
	{name: "CALL", valueType: "int", numArgs: -1},

	{name: "BOOL_LIT", valueType: "bool"},
	{name: "INT_LIT", valueType: "int"},
	{name: "FLOAT_LIT", valueType: "float"},
	{name: "STRING_LIT", valueType: "string"},
	{name: "NULL_LIT"},

	{name: "FILTER", numArgs: 2},
	{name: "INDEX", numArgs: 2},

	{name: "ADD", numArgs: 2},
	{name: "SUB", numArgs: 2},
	{name: "MUL", numArgs: 2},
	{name: "QUO", numArgs: 2},
	{name: "CONCAT", numArgs: 2},
	{name: "AND", numArgs: 2},
	{name: "OR", numArgs: 2},
	{name: "EQ", numArgs: 2},
	{name: "NOT_EQ", numArgs: 2},
	{name: "LT", numArgs: 2},
	{name: "GT", numArgs: 2},
	{name: "LT_EQ", numArgs: 2},
	{name: "GT_EQ", numArgs: 2},
	{name: "MOD", numArgs: 2},
	{name: "MATCHES", numArgs: 2},
	{name: "DOT_ACCESS", numArgs: 2},

	{name: "NOT", numArgs: 1},
	{name: "NEG", numArgs: 1},
}

func main() {
	var exprs []expression
	for i, info := range rawExpressions {
		exprs = append(exprs, expression{
			ID:        i + 1,
			Name:      info.name,
			ValueType: info.valueType,
			NumArgs:   info.numArgs,
		})
	}
	templateData := map[string]interface{}{
		"Expressions": exprs,
	}
	err := outputTemplate.Execute(os.Stdout, templateData)
	if err != nil {
		panic(err)
	}
}

var outputTemplate = template.Must(template.New("").Parse(`<?php

namespace KTemplate\Internal\Compile;

// File generated by gen_exprs/main.go; DO NOT EDIT!

class ExprKind {
    public const BAD = 0;
    {{ range $.Expressions }}
    public const {{.Name}} = {{.ID}};{{ if .ValueType }} // $value is {{.ValueType}}{{ end }}
    {{- end }}

	/**
     * @param int $kind
     * @return int
     */
    public static function numArgs($kind) {
        switch ($kind) {
        {{- range $.Expressions }}
        {{- if ne .NumArgs 2 }}
        case self::{{.Name}}:
            return {{.NumArgs}};
        {{- end -}}
        {{- end }}
        default:
            return 2; // The most common number
        }
    }
}
`))
